apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: assetuuidrequired
  annotations:
    description: "ACME Payments Inc. FinOps Compliance - Asset UUID Requirement for Cost Optimization"
    organization: "ACME Payments Inc."
    policy-category: "finops-compliance"
    cost-impact: "high"
    version: "v1.0"
spec:
  crd:
    spec:
      names:
        kind: AssetUuidRequired
      validation:
        openAPIV3Schema:
          type: object
          properties:
            enforcementMode:
              type: string
              enum: ["loose", "strict"]
              description: "Enforcement mode: loose (new deployments only) or strict (all deployments)"
            exemptNamespaces:
              type: array
              items:
                type: string
              description: "Namespaces to exempt from this policy"
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package assetuuidrequired

        violation[{"msg": msg}] {
          # Only apply to Deployment resources
          input.review.kind.kind == "Deployment"

          # Check if namespace is exempt
          not is_exempt_namespace

          # Check if deployment is centrally exempted
          not is_centrally_exempted

          # Check if assetUuid label is missing
          not has_asset_uuid

          # Check enforcement mode and operation type
          should_enforce

          # Generate appropriate message based on enforcement mode
          msg := generate_violation_message
        }

        # Determine when to enforce the policy based on mode
        should_enforce {
          input.parameters.enforcementMode == "strict"
          # In strict mode, enforce on both CREATE and UPDATE operations
        }

        should_enforce {
          input.parameters.enforcementMode == "loose"
          # In loose mode, only enforce on CREATE operations (new deployments)
          input.review.operation == "CREATE"
        }

        # Check if namespace is exempt
        is_exempt_namespace {
          input.parameters.exemptNamespaces[_] == input.review.object.metadata.namespace
        }

        # Check if assetUuid label exists and is not empty
        has_asset_uuid {
          asset_uuid := input.review.object.metadata.labels.assetUuid
          asset_uuid != ""
          count(asset_uuid) > 0
        }

        # Check if deployment is centrally exempted
        # Note: In a real implementation, this would fetch from S3
        # For demo purposes, we'll use a simple list of known exempted deployments
        is_centrally_exempted {
          deployment_key := sprintf("%s/%s", [input.review.object.metadata.namespace, input.review.object.metadata.name])
          exempted_deployments := {
            "opa-loose-demo/test-non-compliant-app",
            "opa-strict-demo/test-non-compliant-app",
            "monitoring/legacy-prometheus",
            "logging/fluentd-legacy"
          }
          exempted_deployments[deployment_key]
        }

        # Generate violation message based on enforcement mode
        generate_violation_message = msg {
          input.parameters.enforcementMode == "loose"
          msg := sprintf("üè¶ ACME Payments Inc. FinOps Policy Violation - LOOSE ENFORCEMENT\n\nüìã VIOLATION DETAILS:\nDeployment: %s\nNamespace: %s\nOperation: %s\n\n‚ùå COMPLIANCE ISSUE:\nMissing required 'assetUuid' label for cost tracking and optimization.\n\nüìä BUSINESS IMPACT:\nThis NEW deployment cannot be properly tracked for cost allocation, chargeback, and FinOps optimization initiatives.\n\nüîß REQUIRED ACTION:\nAdd an 'assetUuid' label with a valid asset identifier to enable:\n‚Ä¢ Cost center allocation\n‚Ä¢ Resource optimization tracking\n‚Ä¢ Compliance with ACME Payments financial governance\n\nüí° LOOSE MODE NOTE:\nExisting deployments can still be updated, but new deployments must be compliant.\n\nüìû SUPPORT:\nContact: finops-team@acmepayments.com\nDocumentation: https://wiki.acmepayments.com/finops/asset-tagging\nTicket System: https://jira.acmepayments.com/finops", [
            input.review.object.metadata.name,
            input.review.object.metadata.namespace,
            input.review.operation
          ])
        }

        generate_violation_message = msg {
          input.parameters.enforcementMode == "strict"
          msg := sprintf("üè¶ ACME Payments Inc. FinOps Policy Violation - STRICT ENFORCEMENT\n\nüìã VIOLATION DETAILS:\nDeployment: %s\nNamespace: %s\nOperation: %s\n\n‚ùå CRITICAL COMPLIANCE ISSUE:\nMissing required 'assetUuid' label for cost tracking and optimization.\n\nüö® DEPLOYMENT BLOCKED:\nThis deployment has been DENIED due to strict FinOps compliance requirements.\n\nüìä BUSINESS IMPACT:\n‚Ä¢ Cost center allocation impossible\n‚Ä¢ Resource optimization tracking disabled\n‚Ä¢ Non-compliance with ACME Payments financial governance\n‚Ä¢ Potential audit findings and regulatory issues\n\nüîß IMMEDIATE ACTION REQUIRED:\nAdd an 'assetUuid' label with a valid asset identifier to enable:\n‚Ä¢ Cost center allocation and chargeback\n‚Ä¢ Resource optimization tracking\n‚Ä¢ Compliance with payment industry standards\n‚Ä¢ Audit trail for financial reporting\n\n‚ö†Ô∏è STRICT MODE:\nALL deployment operations require compliance - no exceptions for existing deployments.\n\nüìû URGENT SUPPORT:\nContact: finops-team@acmepayments.com\nEscalation: finops-director@acmepayments.com\nDocumentation: https://wiki.acmepayments.com/finops/asset-tagging\nEmergency Ticket: https://jira.acmepayments.com/finops/emergency", [
            input.review.object.metadata.name,
            input.review.object.metadata.namespace,
            input.review.operation
          ])
        }
