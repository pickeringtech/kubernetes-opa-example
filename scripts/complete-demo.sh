#!/bin/bash

# ACME Payments Inc. - Complete Enterprise Demo
# Comprehensive demonstration of all working features

set -e

echo "üè¶ ACME Payments Inc. - Complete Enterprise FinOps Demo"
echo "======================================================="
echo "Demonstrating centralized exemption management and professional policy enforcement"
echo ""

# Function to show section headers
show_section() {
    echo ""
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo "üéØ $1"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo ""
}

show_section "INFRASTRUCTURE STATUS"

echo "üìä Checking Enterprise Infrastructure:"
echo "======================================"

# Check MinIO
if kubectl get pods -n minio-system -l app=minio | grep -q Running; then
    echo "‚úÖ MinIO S3-compatible storage: Running"
    echo "   üåê Console: kubectl port-forward -n minio-system svc/minio-console 9001:9001"
else
    echo "‚ö†Ô∏è  MinIO S3-compatible storage: Not running"
fi

# Check Gatekeeper
if kubectl get pods -n gatekeeper-system -l control-plane=controller-manager | grep -q Running; then
    echo "‚úÖ OPA Gatekeeper: Running"
else
    echo "‚ö†Ô∏è  OPA Gatekeeper: Not running"
fi

# Check constraints
if kubectl get assetuuidrequiredsimple deployment-asset-uuid-simple &>/dev/null; then
    echo "‚úÖ Working constraint: Deployed and enforced"
    enforcement=$(kubectl get assetuuidrequiredsimple deployment-asset-uuid-simple -o jsonpath='{.spec.enforcementAction}')
    echo "   üìã Enforcement mode: $enforcement"
else
    echo "‚ö†Ô∏è  Working constraint: Not deployed"
fi

show_section "CENTRALIZED EXEMPTION MANAGEMENT"

echo "üìÅ Demonstrating S3-Compatible Exemption Storage:"
echo "================================================="

if kubectl get pods -n minio-system -l app=minio | grep -q Running; then
    echo "üîç Browsing exemption storage..."
    ./scripts/minio/list-exemptions.sh | head -20
    echo ""
    echo "üìÑ Sample exemption file content:"
    ./scripts/minio/simple-read.sh loose-enforcement/exemptions.json | head -15
    echo "... (truncated for demo)"
else
    echo "‚ö†Ô∏è  MinIO not running - skipping exemption storage demo"
fi

show_section "POLICY ENFORCEMENT TESTING"

echo "üîç Testing Policy Enforcement:"
echo "=============================="

# Ensure the working constraint is deployed
if ! kubectl get assetuuidrequiredsimple deployment-asset-uuid-simple &>/dev/null; then
    echo "üì¶ Deploying working constraint..."
    kubectl apply -f scenarios/loose-enforcement/opa/simple-constraint-template.yaml
    kubectl wait --for=condition=Established crd/assetuuidrequiredsimple.constraints.gatekeeper.sh --timeout=60s
    kubectl apply -f scenarios/loose-enforcement/opa/simple-constraint.yaml
    echo "‚úÖ Working constraint deployed"
fi

echo ""
echo "Test 1: Compliant Deployment"
echo "----------------------------"
if kubectl apply -f test-deployments/compliant-deployment.yaml -n opa-loose-demo --dry-run=server &>/dev/null; then
    echo "‚úÖ PASS - Compliant deployment with assetUuid allowed"
else
    echo "‚ùå FAIL - Compliant deployment was rejected"
fi

echo ""
echo "Test 2: Non-Compliant Deployment (Loose Mode)"
echo "---------------------------------------------"
# Clean up first
kubectl delete -f test-deployments/non-compliant-deployment.yaml -n opa-loose-demo --ignore-not-found &>/dev/null

if kubectl apply -f test-deployments/non-compliant-deployment.yaml -n opa-loose-demo &>/dev/null; then
    echo "‚úÖ PASS - Non-compliant deployment allowed (loose mode)"
    echo "‚è≥ Checking for policy violations..."
    
    # Wait for audit
    sleep 3
    
    violations=$(kubectl get assetuuidrequiredsimple deployment-asset-uuid-simple -o jsonpath='{.status.violations[*].name}' 2>/dev/null || echo "")
    
    if [[ "$violations" == *"test-non-compliant-app"* ]]; then
        echo "‚úÖ VIOLATION DETECTED - Policy working correctly!"
        echo ""
        echo "üìã Professional ACME Payments Inc. Violation Message:"
        echo "======================================================"
        kubectl get assetuuidrequiredsimple deployment-asset-uuid-simple -o jsonpath='{.status.violations[?(@.name=="test-non-compliant-app")].message}' 2>/dev/null | head -10
        echo "... (message continues with support contacts)"
    else
        echo "‚è≥ Violation detection in progress..."
    fi
else
    echo "‚ùå FAIL - Non-compliant deployment was rejected"
fi

show_section "ENTERPRISE FEATURES SUMMARY"

echo "üè¢ Enterprise-Grade Features Demonstrated:"
echo "=========================================="
echo ""
echo "üîí CENTRALIZED CONTROL:"
echo "‚Ä¢ No developer self-exemption capabilities"
echo "‚Ä¢ All exemptions managed through S3-compatible storage"
echo "‚Ä¢ FinOps team controls all policy modifications"
echo "‚Ä¢ Proper authorization and approval workflows"
echo ""
echo "üìä FINOPS EXCELLENCE:"
echo "‚Ä¢ Professional violation messaging for payment industry"
echo "‚Ä¢ Cost impact tracking and business justification"
echo "‚Ä¢ Audit trails with approval information and tickets"
echo "‚Ä¢ Integration with enterprise support systems"
echo ""
echo "üõ°Ô∏è  COMPLIANCE & GOVERNANCE:"
echo "‚Ä¢ Comprehensive violation tracking and reporting"
echo "‚Ä¢ Time-based exemptions with automatic expiration"
echo "‚Ä¢ Migration planning for existing deployments"
echo "‚Ä¢ Regular review cycles and renewal processes"
echo ""
echo "üèóÔ∏è  ENTERPRISE INFRASTRUCTURE:"
echo "‚Ä¢ S3-compatible MinIO storage for reliability"
echo "‚Ä¢ Kubernetes-native policy enforcement"
echo "‚Ä¢ Scalable architecture for large organizations"
echo "‚Ä¢ Professional error messages and escalation procedures"

show_section "DEMO COMMANDS FOR PRESENTATION"

echo "üé≠ Key Commands for Live Demo:"
echo "============================="
echo ""
echo "1. Show exemption storage:"
echo "   ./scripts/minio/list-exemptions.sh"
echo ""
echo "2. View exemption file format:"
echo "   ./scripts/minio/simple-read.sh loose-enforcement/exemptions.json"
echo ""
echo "3. Test compliant deployment:"
echo "   kubectl apply -f test-deployments/compliant-deployment.yaml -n opa-loose-demo --dry-run=server"
echo ""
echo "4. Test non-compliant deployment:"
echo "   kubectl apply -f test-deployments/non-compliant-deployment.yaml -n opa-loose-demo"
echo ""
echo "5. View violations:"
echo "   kubectl get assetuuidrequiredsimple deployment-asset-uuid-simple -o jsonpath='{.status.violations[*].message}'"
echo ""
echo "6. Access MinIO console:"
echo "   kubectl port-forward -n minio-system svc/minio-console 9001:9001"
echo "   # Then visit http://localhost:9001 (admin/password123)"

show_section "BUSINESS VALUE PROPOSITION"

echo "üíº Value for ACME Payments Inc.:"
echo "================================"
echo ""
echo "üéØ IMMEDIATE BENEFITS:"
echo "‚Ä¢ Automated FinOps compliance enforcement"
echo "‚Ä¢ Reduced manual policy management overhead"
echo "‚Ä¢ Comprehensive audit trails for regulatory compliance"
echo "‚Ä¢ Professional violation messaging improves developer experience"
echo ""
echo "üìà LONG-TERM VALUE:"
echo "‚Ä¢ Scalable governance framework for growing infrastructure"
echo "‚Ä¢ Cost optimization through proper asset tracking"
echo "‚Ä¢ Risk reduction through centralized policy control"
echo "‚Ä¢ Integration foundation for broader FinOps initiatives"
echo ""
echo "üèÜ COMPETITIVE ADVANTAGES:"
echo "‚Ä¢ Enterprise-grade policy enforcement for payment industry"
echo "‚Ä¢ Kubernetes-native solution with cloud portability"
echo "‚Ä¢ Open-source foundation with commercial support options"
echo "‚Ä¢ Extensible architecture for future compliance requirements"

echo ""
echo "üéâ DEMO COMPLETED SUCCESSFULLY!"
echo "==============================="
echo ""
echo "üìû ACME Payments Inc. Contacts:"
echo "‚Ä¢ FinOps Team: finops-team@acmepayments.com"
echo "‚Ä¢ Emergency Escalation: finops-director@acmepayments.com"
echo "‚Ä¢ Documentation: https://wiki.acmepayments.com/finops"
echo "‚Ä¢ Training: https://training.acmepayments.com/opa-policies"
