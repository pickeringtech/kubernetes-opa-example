#!/bin/bash

# ACME Payments Inc. - View Policy Warnings
# Shows warnings generated by OPA Gatekeeper policies

set -e

# Check arguments
if [ $# -ne 1 ]; then
    echo "üè¶ ACME Payments Inc. - View Policy Warnings"
    echo "============================================"
    echo ""
    echo "Usage: $0 <mode>"
    echo ""
    echo "Modes:"
    echo "  loose  - View warnings from loose enforcement mode"
    echo "  strict - View warnings from strict enforcement mode"
    echo ""
    echo "Examples:"
    echo "  $0 loose"
    echo "  $0 strict"
    echo ""
    echo "üí° This shows warnings generated when non-compliant deployments"
    echo "   are updated in loose mode or when violations are detected."
    exit 1
fi

MODE="$1"

# Validate arguments
if [[ "$MODE" != "loose" && "$MODE" != "strict" ]]; then
    echo "‚ùå Invalid mode: $MODE"
    echo "   Must be 'loose' or 'strict'"
    exit 1
fi

echo "üè¶ ACME Payments Inc. - View Policy Warnings"
echo "============================================"
echo "Viewing warnings for: $MODE mode"
echo ""

# Set constraint names based on mode
if [ "$MODE" = "loose" ]; then
    CONSTRAINT_DENY="asset-uuid-loose-enforcement"
    CONSTRAINT_WARN="asset-uuid-loose-warnings"
    NAMESPACE="opa-loose-demo"
else
    CONSTRAINT_DENY="asset-uuid-strict-enforcement"
    CONSTRAINT_WARN=""
    NAMESPACE="opa-strict-demo"
fi

echo "üìä Constraint Status Summary:"
echo "============================="

# Check if constraints exist
if ! kubectl get assetuuidrequired "$CONSTRAINT_DENY" &>/dev/null; then
    echo "‚ùå Constraint not found: $CONSTRAINT_DENY"
    echo "   Run: ./scripts/setup-$MODE.sh"
    exit 1
fi

# Show deny constraint status
echo "üö´ Deny Constraint ($CONSTRAINT_DENY):"
echo "--------------------------------------"
violation_count=$(kubectl get assetuuidrequired "$CONSTRAINT_DENY" -o jsonpath='{.status.totalViolations}' 2>/dev/null || echo "0")
echo "Total violations: $violation_count"

if [ "$violation_count" -gt 0 ]; then
    echo ""
    echo "üìã Current Violations:"
    kubectl get assetuuidrequired "$CONSTRAINT_DENY" -o jsonpath='{range .status.violations[*]}- {.kind}/{.name} in {.namespace}: {.message}{"\n"}{end}' 2>/dev/null | head -5
    if [ "$violation_count" -gt 5 ]; then
        echo "... and $((violation_count - 5)) more violations"
    fi
fi

# Show warning constraint status (loose mode only)
if [ "$MODE" = "loose" ] && [ -n "$CONSTRAINT_WARN" ]; then
    echo ""
    echo "‚ö†Ô∏è  Warning Constraint ($CONSTRAINT_WARN):"
    echo "----------------------------------------"
    
    if kubectl get assetuuidrequired "$CONSTRAINT_WARN" &>/dev/null; then
        warning_count=$(kubectl get assetuuidrequired "$CONSTRAINT_WARN" -o jsonpath='{.status.totalViolations}' 2>/dev/null || echo "0")
        echo "Total warnings: $warning_count"
        
        if [ "$warning_count" -gt 0 ]; then
            echo ""
            echo "üìã Current Warnings:"
            kubectl get assetuuidrequired "$CONSTRAINT_WARN" -o jsonpath='{range .status.violations[*]}- {.kind}/{.name} in {.namespace}: UPDATE operation generated warning{"\n"}{end}' 2>/dev/null | head -5
            if [ "$warning_count" -gt 5 ]; then
                echo "... and $((warning_count - 5)) more warnings"
            fi
        fi
    else
        echo "Warning constraint not found"
    fi
fi

echo ""
echo "üîç Detailed Violation Messages:"
echo "==============================="

# Show detailed messages for recent violations
echo "Recent violations from $CONSTRAINT_DENY:"
kubectl get assetuuidrequired "$CONSTRAINT_DENY" -o jsonpath='{range .status.violations[*]}{"Deployment: "}{.name}{" in "}{.namespace}{"\n"}{"Message: "}{.message}{"\n\n"}{end}' 2>/dev/null | head -20

if [ "$MODE" = "loose" ] && [ -n "$CONSTRAINT_WARN" ] && kubectl get assetuuidrequired "$CONSTRAINT_WARN" &>/dev/null; then
    echo ""
    echo "Recent warnings from $CONSTRAINT_WARN:"
    kubectl get assetuuidrequired "$CONSTRAINT_WARN" -o jsonpath='{range .status.violations[*]}{"Deployment: "}{.name}{" in "}{.namespace}{"\n"}{"Message: "}{.message}{"\n\n"}{end}' 2>/dev/null | head -20
fi

echo ""
echo "üìà Audit Information:"
echo "===================="
echo "‚Ä¢ Violations are automatically tracked by OPA Gatekeeper"
echo "‚Ä¢ Warnings indicate policy violations that were allowed"
echo "‚Ä¢ All events are logged for compliance and audit purposes"
echo "‚Ä¢ Violation counts help track compliance progress"
echo ""

if [ "$MODE" = "loose" ]; then
    echo "üéØ Loose Mode Behavior:"
    echo "‚Ä¢ CREATE operations: Blocked if non-compliant (violations)"
    echo "‚Ä¢ UPDATE operations: Allowed but generate warnings"
    echo "‚Ä¢ Warnings help track technical debt during migration"
else
    echo "üéØ Strict Mode Behavior:"
    echo "‚Ä¢ CREATE operations: Blocked if non-compliant (violations)"
    echo "‚Ä¢ UPDATE operations: Blocked if non-compliant (violations)"
    echo "‚Ä¢ All violations indicate blocked operations"
fi

echo ""
echo "üîß Commands for Further Investigation:"
echo "======================================"
echo "View full constraint status:"
echo "  kubectl get assetuuidrequired $CONSTRAINT_DENY -o yaml"

if [ "$MODE" = "loose" ] && [ -n "$CONSTRAINT_WARN" ]; then
    echo "  kubectl get assetuuidrequired $CONSTRAINT_WARN -o yaml"
fi

echo ""
echo "View events in namespace:"
echo "  kubectl get events -n $NAMESPACE --field-selector reason=ConstraintViolation"
echo ""
echo "üìû ACME Payments Inc. Support:"
echo "‚Ä¢ FinOps Team: finops-team@acmepayments.com"
echo "‚Ä¢ Compliance: compliance@acmepayments.com"
