#!/bin/bash

# ACME Payments Inc. - Demonstrate Loose vs Strict Modes
# Shows the key differences between enforcement modes

set -e

echo "üè¶ ACME Payments Inc. - Loose vs Strict Mode Demonstration"
echo "=========================================================="
echo "This script demonstrates the key differences between loose and strict enforcement"
echo ""

echo "üìä Current Environment Status:"
echo "=============================="

# Check loose mode
if kubectl get namespace opa-loose-demo &>/dev/null; then
    echo "‚úÖ Loose mode environment: Ready"
    loose_deployments=$(kubectl get deployments -n opa-loose-demo --no-headers | wc -l)
    echo "   Deployments in loose namespace: $loose_deployments"
else
    echo "‚ùå Loose mode environment: Not set up"
    echo "   Run: ./scripts/setup-loose.sh"
fi

# Check strict mode
if kubectl get namespace opa-strict-demo &>/dev/null; then
    echo "‚úÖ Strict mode environment: Ready"
    strict_deployments=$(kubectl get deployments -n opa-strict-demo --no-headers | wc -l)
    echo "   Deployments in strict namespace: $strict_deployments"
else
    echo "‚ùå Strict mode environment: Not set up"
    echo "   Run: ./scripts/setup-strict.sh"
fi

echo ""
echo "üîç Compliance Status Analysis:"
echo "=============================="

if kubectl get namespace opa-loose-demo &>/dev/null; then
    echo "üìã Loose Mode Namespace (opa-loose-demo):"
    echo "----------------------------------------"
    kubectl get deployments -n opa-loose-demo -o custom-columns="NAME:.metadata.name,ASSET_UUID:.metadata.labels.assetUuid,REPLICAS:.spec.replicas" | sed 's/<none>/‚ùå MISSING/g' | sed 's/asset-/‚úÖ /g'
    
    echo ""
    echo "üéØ Loose Mode Behavior:"
    echo "‚Ä¢ ‚úÖ UPDATE operations: ALLOWED (existing deployments can be maintained)"
    echo "‚Ä¢ ‚ùå CREATE operations: BLOCKED if non-compliant"
    echo "‚Ä¢ ‚ö†Ô∏è  Warnings: Generated for non-compliant updates (logged)"
    echo ""
    
    echo "üß™ Test UPDATE in Loose Mode:"
    echo "Try: kubectl patch deployment test-non-compliant-app -n opa-loose-demo -p '{\"spec\":{\"replicas\":2}}'"
    echo "Expected: SUCCESS (update allowed)"
fi

echo ""

if kubectl get namespace opa-strict-demo &>/dev/null; then
    echo "üìã Strict Mode Namespace (opa-strict-demo):"
    echo "------------------------------------------"
    kubectl get deployments -n opa-strict-demo -o custom-columns="NAME:.metadata.name,ASSET_UUID:.metadata.labels.assetUuid,REPLICAS:.spec.replicas" | sed 's/<none>/‚ùå MISSING/g' | sed 's/asset-/‚úÖ /g'
    
    echo ""
    echo "üéØ Strict Mode Behavior:"
    echo "‚Ä¢ ‚ùå UPDATE operations: BLOCKED if non-compliant"
    echo "‚Ä¢ ‚ùå CREATE operations: BLOCKED if non-compliant"
    echo "‚Ä¢ üö´ No exceptions: Full compliance required"
    echo ""
    
    echo "üß™ Test UPDATE in Strict Mode:"
    echo "Try: kubectl patch deployment test-non-compliant-app -n opa-strict-demo -p '{\"spec\":{\"replicas\":2}}'"
    echo "Expected: FAILURE (update blocked with professional ACME FinOps message)"
fi

echo ""
echo "üé≠ Interactive Demo Commands:"
echo "============================="
echo ""
echo "1. Test Loose Mode Updates (should succeed):"
echo "   ./scripts/update-deployment.sh scale loose"
echo "   ./scripts/update-deployment.sh image loose"
echo ""
echo "2. Test Strict Mode Updates (should fail):"
echo "   ./scripts/update-deployment.sh scale strict"
echo "   ./scripts/update-deployment.sh image strict"
echo ""
echo "3. Test New Deployments (both should fail):"
echo "   ./scripts/push-deployment.sh non-compliant loose"
echo "   ./scripts/push-deployment.sh non-compliant strict"
echo ""
echo "4. View Policy Status:"
echo "   ./scripts/view-warnings.sh loose"
echo "   ./scripts/view-warnings.sh strict"
echo ""
echo "5. View Centralized Exemptions:"
echo "   ./scripts/minio/read-exemptions.sh loose-enforcement/exemptions.json"
echo "   ./scripts/minio/read-exemptions.sh strict-enforcement/exemptions.json"

echo ""
echo "üè¢ Enterprise Value Proposition:"
echo "==============================="
echo ""
echo "üéØ LOOSE MODE (Rolling Deployment Strategy):"
echo "‚Ä¢ Prevents NEW technical debt (blocks non-compliant CREATE operations)"
echo "‚Ä¢ Allows existing workload maintenance (permits UPDATE operations)"
echo "‚Ä¢ Provides migration time for teams to add compliance"
echo "‚Ä¢ Generates warnings for audit and tracking purposes"
echo ""
echo "üéØ STRICT MODE (Full Compliance):"
echo "‚Ä¢ Enforces complete policy compliance"
echo "‚Ä¢ Blocks ALL non-compliant operations (CREATE and UPDATE)"
echo "‚Ä¢ Suitable after migration period is complete"
echo "‚Ä¢ Ensures zero tolerance for policy violations"
echo ""
echo "üìä BUSINESS BENEFITS:"
echo "‚Ä¢ Zero downtime during policy rollout"
echo "‚Ä¢ Gradual migration reduces operational risk"
echo "‚Ä¢ Professional ACME Payments Inc. messaging guides developers"
echo "‚Ä¢ Centralized exemption management prevents self-exemption"
echo "‚Ä¢ Complete audit trails for compliance and reporting"

echo ""
echo "üìû ACME Payments Inc. Support:"
echo "‚Ä¢ FinOps Team: finops-team@acmepayments.com"
echo "‚Ä¢ Migration Support: migration-team@acmepayments.com"
echo "‚Ä¢ Emergency Escalation: finops-director@acmepayments.com"
